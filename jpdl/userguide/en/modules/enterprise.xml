<chapter id="enterprise">

  <title>Java EE Application Server Facilities</title>

  <para>The present chapter describes the facilities offered by jBPM to leverage the Java EE
  infrastructure.
  </para>

  <section id="enterprisebeans">

    <title>Enterprise Beans</title>

    <para><literal>CommandServiceBean</literal> is a stateless session bean that executes
    jBPM commands by calling it's execute method within a separate jBPM context. The environment
    entries and resources available for customization are summarized in the table below.
    </para>

    <table>
      <title>Command service bean environment</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <colspec colwidth="1*"/>
        <colspec colwidth="1*"/>
        <colspec colwidth="3*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>JbpmCfgResource</literal></entry>
            <entry>Environment Entry</entry>
            <entry>The classpath resource from which to read the jBPM configuration.
            Optional, defaults to <literal>jbpm.cfg.xml</literal>.
            </entry>
          </row>
          <row>
            <entry><literal>ejb/LocalTimerEntityBean</literal></entry>
            <entry>EJB Reference</entry>
            <entry>Link to the local entity bean that implements the scheduler service.
            Required for processes that contain timers.
            </entry>
          </row>
          <row>
            <entry><literal>jdbc/JbpmDataSource</literal></entry>
            <entry>Resource Manager Reference</entry>
            <entry>Logical name of the data source that provides JDBC connections to the
            jBPM persistence service. Must match the <literal>hibernate.connection.datasource
            </literal> property in the Hibernate configuration file.
            </entry>
          </row>
          <row>
            <entry><literal>jms/JbpmConnectionFactory</literal></entry>
            <entry>Resource Manager Reference</entry>
            <entry>Logical name of the factory that provides JMS connections to the jBPM
            message service. Required for processes that contain asynchronous continuations.
            </entry>
          </row>
          <row>
            <entry><literal>jms/JobQueue</literal></entry>
            <entry>Message Destination Reference</entry>
            <entry>The jBPM message service sends job messages to the queue referenced here.
            To ensure this is the same queue from which the job listener bean receives 
            messages, the <literal>message-destination-link</literal> points to a common 
            logical destination, <literal>JobQueue</literal>.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para><literal>CommandListenerBean</literal> is a message-driven bean that listens
    on the <literal>JbpmCommandQueue</literal> for command messages. This bean delegates
    command execution to the <literal>CommandServiceBean</literal>.
    </para>

    <para>The body of the message must be a Java object that implements the <literal>
    org.jbpm.Command</literal> interface. The message properties, if any, are ignored.
    If the message does not match the expected format, it is forwarded to the <literal>
    DeadLetterQueue</literal>. No further processing is done on the message.
    If the destination reference is absent, the message is rejected.
    </para>

    <para>In case the received message specifies a <code>replyTo</code> destination,
    the result of the command execution is wrapped into an object message and sent 
    there. The command connection factory environment reference indicates the resource
    manager that supplies JMS connections.
    </para>

    <para>Conversely, <literal>JobListenerBean</literal> is a message-driven bean that 
    listens on the <literal>JbpmJobQueue</literal> for job messages to support asynchronous
    continuations.
    </para>

    <para>The message must have a property called <literal>jobId</literal> of type 
    <literal>long</literal> which references a pending <literal>Job</literal> in the
    database. The message body, if any, is ignored.
    </para>

    <para>This bean extends the <literal>CommandListenerBean</literal> and inherits its
    environment entries and resource references available for customization.
    </para>

    <table>
      <title>Command/Job listener bean environment</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <colspec colwidth="1*"/>
        <colspec colwidth="1*"/>
        <colspec colwidth="3*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>ejb/LocalCommandServiceBean</code></entry>
            <entry>EJB Reference</entry>
            <entry>Link to the local session bean that executes commands on a separate 
            jBPM context.
            </entry>
          </row>
          <row>
            <entry><code>jms/JbpmConnectionFactory</code></entry>
            <entry>Resource Manager Reference</entry>
            <entry>Logical name of the factory that provides JMS connections for producing
            result messages. Required for command messages that indicate a reply
            destination.
            </entry>
          </row>
          <row>
            <entry><code>jms/DeadLetterQueue</code></entry>
            <entry>Message Destination Reference</entry>
            <entry>Messages which do not contain a command are sent to the queue referenced
            here. Optional; if absent, such messages are rejected, which may cause the 
            container to redeliver.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The <literal>TimerEntityBean</literal> interacts with the EJB timer service to 
    schedule jBPM timers. Upon expiration, execution of the timer is actually delegated to
    the command service bean.</para>
    
    <para>The timer entity bean requires access to the jBPM data source for reading timer
    data. The EJB deployment descriptor does not provide a way to define how an entity bean
    maps to a database. This is left off to the container provider. In JBoss AS, the 
    <literal>jbosscmp-jdbc.xml</literal> descriptor defines the data source JNDI name and 
    the relational mapping data (table and column names, among others). Note that the
    JBoss CMP descriptor uses a global JNDI name (<literal>java:JbpmDS</literal>),
    as opposed to a resource manager reference (<literal>java:comp/env/jdbc/JbpmDataSource</literal>).
    </para>

    <para>Earlier versions of jBPM used a stateless session bean called <literal>TimerServiceBean
    </literal> to interact with the EJB timer service. The session approach had to be abandoned
    because there is an unavoidable bottleneck at the cancelation methods. Because session beans
    have no identity, the timer service is forced to iterate through <emphasis>all</emphasis> 
    the timers for finding the ones it has to cancel. The bean is still around for backwards
    compatibility. It works under the same environment as the <literal>TimerEntityBean</literal>,
    so migration is easy.
    </para>

    <table border="1">
    <title>Timer entity/service bean environment</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <colspec colwidth="1*"/>
        <colspec colwidth="1*"/>
        <colspec colwidth="3*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Type</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>ejb/LocalCommandServiceBean</code></entry>
            <entry>EJB Reference</entry>
            <entry>Link to the local {@linkplain CommandServiceBean session bean} that
            executes timers on a separate jBPM context.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

  </section>

  <section id="enterprisejbpmconfig">

    <title>jBPM Enterprise Configuration</title>

    <para><literal>jbpm.cfg.xml</literal> includes the following configuration items:
    </para>

    <programlisting>&lt;jbpm-context&gt;
  &lt;service name="persistence"
           factory="org.jbpm.persistence.jta.JtaDbPersistenceServiceFactory" /&gt;
  &lt;service name="message"
           factory="org.jbpm.msg.jms.JmsMessageServiceFactoryImpl" /&gt;
  &lt;service name="scheduler"
           factory="org.jbpm.scheduler.ejbtimer.EntitySchedulerServiceFactory" /&gt;
&lt;/jbpm-context&gt;</programlisting>

    <para><literal>JtaDbPersistenceServiceFactory</literal> enables jBPM to participate in JTA 
    transactions. If an existing transaction is underway, the JTA persistence service clings to it; 
    otherwise it starts a new transaction. The jBPM enterprise beans are configured to delegate
    transaction management to the container. However, if you create a JbpmContext in an environment
    where no transaction is active (say, in a web application), one will be started automatically.
    The JTA persistence service factory has the configurable fields described below.
    </para>

    <itemizedlist>

      <listitem><literal>isCurrentSessionEnabled</literal>: if <literal>true</literal>, jBPM will 
      use the "current" Hibernate session associated with the ongoing JTA transaction. This is the
      default setting. See the Hibernate guide, section <ulink
      url="http://www.hibernate.org/hib_docs/v3/reference/en/html/architecture.html#architecture-current-session">
      2.5 Contextual sessions</ulink> for a description of the behavior. You can take advantage
      of the contextual session mechanism to use the same session used by jBPM in other parts
      of your application through a call to <literal>SessionFactory.getCurrentSession()</literal>.
      On the other hand, you might want to supply your own Hibernate session to jBPM. To do so,
      set <literal>isCurrentSessionEnabled</literal> to <literal>false</literal> and inject the 
      session via the <literal>JbpmContext.setSession(session)</literal> method. This will also 
      ensure that jBPM uses the same Hibernate session as other parts of your application. Note, 
      the Hibernate session can be injected into a stateless session bean via a persistence context,
      for example.
      </listitem>

      <listitem><literal>isTransactionEnabled</literal>: a <literal>true</literal> value for this
      field means jBPM will begin a transaction through Hibernate's transaction API (section <ulink
      url="http://www.hibernate.org/hib_docs/v3/reference/en/html/transactions.html#transactions-demarcation">
      11.2. Database transaction demarcation</ulink> of the Hibernate manual shows the API) upon 
      <literal>JbpmConfiguration.createJbpmContext()</literal>, commit the transaction and close the 
      Hibernate session upon <literal>JbpmContext.close()</literal>. This is NOT the desired 
      behaviour when jBPM is deployed as an ear, hence <literal>isTransactionEnabled</literal> is set
      to <literal>false</literal> by default.
      </listitem>

    </itemizedlist>

    <para><literal>JmsMessageServiceFactoryImpl</literal> leverages the reliable communication
    infrastructure exposed through JMS interfaces to deliver asynchronous continuation messages
    to the <literal>JobListenerBean</literal>. The JMS message service factory exposes the following
    configurable fields.</para>    

    <itemizedlist>

      <listitem><literal>connectionFactoryJndiName</literal>: the name of the JMS connection factory
      in the JNDI initial context. Defaults to <literal>java:comp/env/jms/JbpmConnectionFactory</literal>.
      </listitem>

      <listitem><literal>destinationJndiName</literal>: the name of the JMS destination where job 
      messages will be sent. Must match the destination from which <literal>JobListenerBean</literal>
      receives messages. Defaults to <literal>java:comp/env/jms/JobQueue</literal>.
      </listitem>

      <listitem><literal>isCommitEnabled</literal>: tells whether jBPM should commit the JMS session
      upon <literal>JbpmContext.close()</literal>. Messages produced by the JMS message service are 
      never meant to be received before the current transaction commits; hence the JMS sessions 
      created by the service are always transacted. The default value -<literal>false</literal>- is
      appropriate when the connection factory in use is XA capable, as the JMS session's produced 
      messages will be controlled by the overall JTA transaction. This field should be set to 
      <literal>true</literal> if the JMS connection factory is not XA capable so that jBPM commits
      the JMS session's local transaction explicitly.
      </listitem>
    </itemizedlist>

    <para><literal>EntitySchedulerServiceFactory</literal> builds on the transactional notification
    service for timed events provided by the EJB container to schedule business process timers. The
    EJB scheduler service factory has the configurable field described below.
    </para>

    <itemizedlist>
      <listitem><literal>timerEntityHomeJndiName</literal>: the name of the 
      <literal>TimerEntityBean</literal>'s local home interface in the JNDI initial context. 
      Defaults to <literal>java:comp/env/ejb/LocalTimerEntityBean</literal>.
      </listitem>
    </itemizedlist>

  </section>

  <section id="enterprisehibernateconfig">

    <title>Hibernate Enterprise Configuration</title>

    <para><literal>hibernate.cfg.xml</literal> includes the following configuration items that may
    be modified to support other databases or application servers.
    </para>

    <programlisting>&lt;!-- sql dialect --&gt;
&lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.HSQLDialect&lt;/property&gt;

&lt;property name="hibernate.cache.provider_class"&gt;
  org.hibernate.cache.HashtableCacheProvider
&lt;/property&gt;

&lt;!-- DataSource properties (begin) --&gt;
&lt;property name="hibernate.connection.datasource"&gt;java:comp/env/jdbc/JbpmDataSource&lt;/property&gt;
&lt;!-- DataSource properties (end) --&gt;

&lt;!-- JTA transaction properties (begin) -->
&lt;property name="hibernate.transaction.factory_class"&gt;
  org.hibernate.transaction.JTATransactionFactory
&lt;/property&gt;
&lt;property name="hibernate.transaction.manager_lookup_class"&gt;
  org.hibernate.transaction.JBossTransactionManagerLookup
&lt;/property&gt;
&lt;!-- JTA transaction properties (end) --&gt;

&lt;!-- CMT transaction properties (begin) ===
&lt;property name="hibernate.transaction.factory_class"&gt;
  org.hibernate.transaction.CMTTransactionFactory
&lt;/property&gt;
&lt;property name="hibernate.transaction.manager_lookup_class"&gt;
  org.hibernate.transaction.JBossTransactionManagerLookup
&lt;/property&gt;
==== CMT transaction properties (end) --&gt;</programlisting>

    <para>You may replace the <literal>hibernate.dialect</literal> with one that corresponds to your 
    database management system. The Hibernate reference guide enumerates the available database 
    dialects in section <ulink 
    url="http://www.hibernate.org/hib_docs/v3/reference/en/html/session-configuration.html#configuration-optional-dialects">
    3.4.1 SQL dialects</ulink>.
    </para>

    <para><literal>HashtableCacheProvider</literal> can be replaced with other 
    supported cache providers. Refer to section <ulink 
    url="http://www.hibernate.org/hib_docs/v3/reference/en/html/performance.html#performance-cache">
    19.2 The second level cache</ulink> of the Hibernate manual for a list of the 
    supported cache providers.
    </para>

    <para>The <literal>JBossTransactionManagerLookup</literal> may be replaced with a strategy 
    appropriate to applications servers other than JBoss. See section <ulink 
    url="http://www.hibernate.org/hib_docs/v3/reference/en/html/session-configuration.html#configuration-optional-transactionstrategy">
    3.8.1 Transaction strategy configuration</ulink> to find the lookup class that
    corresponds to each application server. 
    </para>

    <para>Note that the JNDI name used in <literal>hibernate.connection.datasource</literal>
    is, in fact, a resource manager reference, portable across application servers. Said
    reference is meant to be bound to an actual data source in the target application server
    at deployment time. In the included <code>jboss.xml</code> descriptor, the reference is
    bound to <code>java:JbpmDS</code>.
    </para>

    <para>Out of the box, jBPM is configured to use the <literal>JTATransactionFactory</literal>. 
    If an existing transaction is underway, the JTA transaction factory uses it; otherwise it
    creates a new transaction. The jBPM enterprise beans are configured to delegate transaction
    management to the container. However, if you use the jBPM APIs in a context where no 
    transaction is active (say, in a web application), one will be started automatically.
    </para>

    <para>If your own EJBs use container-managed transactions and you want to prevent unintended
    transaction creations, you can switch to the <literal>CMTTransactionFactory</literal>. With
    that setting, Hibernate will always look for an existing transaction and will report a problem
    if none is found.
    </para>

  </section>

  <section id="clientcomponents">

    <title>Client Components</title>

    <para>Client components written directly against the jBPM APIs that wish to leverage the
    enterprise services must ensure that their deployment descriptors have the appropriate
    environment references in place. The descriptor below can be regarded as typical for
    a client session bean.
    </para>

    <programlisting><![CDATA[<session>

  <ejb-name>MyClientBean</ejb-name>
  <home>org.example.RemoteClientHome</home>
  <remote>org.example.RemoteClient</remote>
  <local-home>org.example.LocalClientHome</local-home>
  <local>org.example.LocalClient</local>
  <ejb-class>org.example.ClientBean</ejb-class>
  <session-type>Stateless</session-type>
  <transaction-type>Container</transaction-type>

  <ejb-local-ref>
    <ejb-ref-name>ejb/LocalTimerEntityBean</ejb-ref-name>
    <ejb-ref-type>Entity</ejb-ref-type>
    <local-home>org.jbpm.ejb.LocalTimerEntityHome</local-home>
    <local>org.jbpm.ejb.LocalTimerEntity</local>
  </ejb-local-ref>

  <resource-ref>
    <res-ref-name>jdbc/JbpmDataSource</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

  <resource-ref>
    <res-ref-name>jms/JbpmConnectionFactory</res-ref-name>
    <res-type>javax.jms.ConnnectionFactory</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

  <message-destination-ref>
    <message-destination-ref-name>jms/JobQueue</message-destination-ref-name>
    <message-destination-type>javax.jms.Queue</message-destination-type>
    <message-destination-usage>Produces</message-destination-usage>
  </message-destination-ref>

</session>]]></programlisting>

    <para>Provided the target application server was JBoss, the above environment references
    could be bound to resources in the target operational environment as follows. Note that 
    the JNDI names match the values used by the jBPM enterprise beans.
    </para>

    <programlisting><![CDATA[<session>

  <ejb-name>MyClientBean</ejb-name>
  <jndi-name>ejb/MyClientBean</jndi-name>
  <local-jndi-name>java:ejb/MyClientBean</local-jndi-name>

  <ejb-local-ref>
    <ejb-ref-name>ejb/LocalTimerEntityBean</ejb-ref-name>
    <local-jndi-name>java:ejb/TimerEntityBean</local-jndi-name>
  </ejb-local-ref>

  <resource-ref>
    <res-ref-name>jdbc/JbpmDataSource</res-ref-name>
    <jndi-name>java:JbpmDS</jndi-name>
  </resource-ref>

  <resource-ref>
    <res-ref-name>jms/JbpmConnectionFactory</res-ref-name>
    <jndi-name>java:JmsXA</jndi-name>
  </resource-ref>

  <message-destination-ref>
    <message-destination-ref-name>jms/JobQueue</message-destination-ref-name>
    <jndi-name>queue/JbpmJobQueue</jndi-name>
  </message-destination-ref>

</session>]]></programlisting>

    <para>In case the client component is a web application, as opposed to an enterprise bean,
    the deployment descriptor would look like this:</para>

    <programlisting><![CDATA[<web-app>

  <servlet>
    <servlet-name>MyClientServlet</servlet-name>
    <servlet-class>org.example.ClientServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>MyClientServlet</servlet-name>
    <url-pattern>/client/servlet</url-pattern>
  </servlet-mapping>

  <ejb-local-ref>
    <ejb-ref-name>ejb/LocalTimerEntityBean</ejb-ref-name>
    <ejb-ref-type>Entity</ejb-ref-type>
    <local-home>org.jbpm.ejb.LocalTimerEntityHome</local-home>
    <local>org.jbpm.ejb.LocalTimerEntity</local>
    <ejb-link>TimerEntityBean</ejb-link>
  </ejb-local-ref>

  <resource-ref>
    <res-ref-name>jdbc/JbpmDataSource</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

  <resource-ref>
    <res-ref-name>jms/JbpmConnectionFactory</res-ref-name>
    <res-type>javax.jms.ConnectionFactory</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

  <message-destination-ref>
    <message-destination-ref-name>jms/JobQueue</message-destination-ref-name>
    <message-destination-type>javax.jms.Queue</message-destination-type>
    <message-destination-usage>Produces</message-destination-usage>
    <message-destination-link>JobQueue</message-destination-link>
  </message-destination-ref>

</web-app>]]></programlisting>

    <para>The above environment references could be bound to resources in the target 
    operational environment as follows, if the target application server was JBoss.
    </para>

    <programlisting><![CDATA[<jboss-web>

  <ejb-local-ref>
    <ejb-ref-name>ejb/LocalTimerEntityBean</ejb-ref-name>
    <local-jndi-name>java:ejb/TimerEntityBean</local-jndi-name>
  </ejb-local-ref>

  <resource-ref>
    <res-ref-name>jdbc/JbpmDataSource</res-ref-name>
    <jndi-name>java:JbpmDS</jndi-name>
  </resource-ref>

  <resource-ref>
    <res-ref-name>jms/JbpmConnectionFactory</res-ref-name>
    <jndi-name>java:JmsXA</jndi-name>
  </resource-ref>

  <message-destination-ref>
    <message-destination-ref-name>jms/JobQueue</message-destination-ref-name>
    <jndi-name>queue/JbpmJobQueue</jndi-name>
  </message-destination-ref>

</jboss-web>]]></programlisting>

  </section>

</chapter>