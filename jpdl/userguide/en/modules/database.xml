<?xml version="1.0" encoding="UTF-8"?>
<chapter id="thejbpmdatabase">
  <title>The jBPM Database</title>

  <section>
    <title>Switching the Database Backend</title>

    <para>Switching the JBoss jBPM database backend is reasonably
    straightforward. We will step through this process using PostgreSQL and
    MySQL as an example. The process is identical for all other supported
    databases. For a number of these supported databases, a number of JDBC
    drivers, Hibernate configuration files and Ant build files to generate the
    database creation scripts are present in the jBPM distribution in the DB
    subproject. If you cannot find these files for the database you wish to
    use, you should first make sure if Hibernate supports your database. If
    this is the case you can have a look at files for one of the databases
    present in the DB project and mimic this using your own database.</para>

    <para>For this document, we will use the JBoss jBPM Starter's Kit
    distribution. We will assume that this starter's kit was extracted to a
    location on your machine named ${JBPM_SDK_HOME}. You will find the DB
    subproject of jBPM in the ${JBPM_SDK_HOME}/jbpm-db.</para>

    <para>After installing the database, you will have to run the database
    creation scripts. These will create the jBPM tables in the database. To
    make the default webapp running with this new database, we will have to
    update some configuration files of the server included in the Starter's
    Kit. For these configuration changes, we will not go into too much detail.
    If you want to know more about the different configuration settings in the
    server, we advise you to have a look at the JBoss documentation.</para>
    
    <section id="isolationlevel">
      <title>Isolation level</title>
      <para>Whatever database that you use, make sure that the isolation level 
      of the configured JDBC connection is at least READ_COMMITTED, as explained 
      in <xref linkend="isolationlevelofthejdbcconnection"/>
      </para>
    </section>

    <section>
      <title>Installing the PostgreSQL Database Manager</title>

      <para>To install PostgreSQL or any other database you may be using, we
      refer to the installation manual of these products. For Windows
      PostgreSQL installation is pretty straightforward. The installer creates
      a dedicated Windows user and allows to define the database
      administrator. PostgreSQL comes with an administration tool called
      pgAdmin III that we will use to create the jBPM database. A screenshot
      of this tool right after creating the JbpmDB database with it is shown
      in the figure below.</para>

      <figure>
        <title>The PostgreSQL pgAdmin III tool after creating the JbpmDB
        database</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/create_database.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>After the installation of the database, we can use a database
      viewer tool like DBVisualizer to look at the contents of the database.
      Before you can define a database connection with DBVisualizer, you might
      have to add the PostgreSQL JDBC driver to the driver manager. Select
      'Tools-&gt;Driver Manager...' to open the driver manager window. Look at
      the figure below for an example of how to add the PostgreSQL JDBC
      driver.</para>

      <figure>
        <title>Adding the JDBC driver to the driver manager</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/install_driver.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Now everything is set to define a database connection in
      DBVisualizer to our newly created database. We will use this tool
      further in this document to make sure the creation scripts and process
      deployment are working as expected. For an example of creating the
      connection in DBVisualizer we refer to the following figure. As you can
      see, there are no tables present yet in this database. We will create
      them in the following section.</para>

      <figure>
        <title>Create the connection to the jBPM database</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/create_connection.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Another thing worth mentioning is the Database URL above :
      'jdbc:postgresql://localhost:5432/JbpmDB'. If you created the JbpmDB
      database with another name, or if PostgreSQL is not running on the
      localhost machine or on another port, you'll have to adapt your Database
      URL accordingly.</para>
    </section>

    <section>
      <title>Installing the MySQL Database Manager</title>

      <para>To install the MySQL database, please refer to the documentation
      provided by MySQL. The installation is very easy and straightforward and
      only takes a few minutes in windows. You will need to use the database
      Administration console provided by MySQL.</para>

      <figure>
        <title>The MySQL Administrator</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/mysql_admin.jpg" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Creating the JBoss jBPM Database with your new PostGreSQL or
      MySQL</title>

      <para>In order to get the proper database script generated for your
      database, you should use the scripts provided in the jBPM Starter's Kit.
      In the Starter's Kit under the
      ${JBPM_SSTARTERSKIT_HOME}/jbpm-db/build/${DATABASE_TYPE}/scripts you
      will find create scripts for all the major databases. Using your
      database admin console, navigate to the database and then open and
      execute the create script we just referenced. Below are screen shots
      doing this for PostGreSQL and MySQL under their respective admin
      consoles</para>

      <figure>
        <mediaobject>
          <imageobject />
        </mediaobject>
      </figure>

      <section>
        <title>Creating the JBoss jBPM Database with PostGreSQL</title>

        <para>As already mentioned you will find the database scripts for a
        lot of the supported databases in the DB subproject. The database
        scripts for PostgreSQL are found in the folder
        '${JBPM_SDK_HOME}/jbpm-db/build/mysql/scripts. The creation script is
        called 'postgresql.create.sql'. Using DBVisualizer, you can load this
        script by switching to the 'SQL Commander' tab and then selecting
        'File-&gt;Load...'. In the following dialog, navigate to the creation
        script file. The result of doing so is shown in the figure
        below.</para>

        <figure>
          <title>Load the database creation script</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/load_script.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>To execution this script with DBVisualizer, you select
        'Database-&gt;Execute'. After this step all JBoss jBPM tables are
        created. The situation is illustrated in the figure below.</para>

        <figure>
          <title>Running the database creation script</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/execute_script.jpg" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Creating the JBoss jBPM Database with your new MySQL</title>

        <para>Once you have installed MySQL go ahead and create a jbpm
        database, use any name you like for this DB. In this example "jbpmdb"
        was used. A screenshot of the database is below.</para>

        <figure>
          <title>The MySQL Administrator after creating the jbpm database
          under MySQL</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/mysql_create_database.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>You will use the MySQL command line tool to load the database
        scripts. Open a DOS box or terminal window and type the following
        command:</para>

        <programlisting> mysql -u root -p </programlisting>

        <para>You will be prompted for your MySQL password for the root
        account or whatever account you are using to modify this database.
        After logging in, type the following command to use the newly created
        jbpmdb:</para>

        <programlisting>use jbpmdb </programlisting>

        <figure>
          <title>Loading the database create scripts for MySQL</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/load_mysql_shell1.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Now you can load the database script for jBPM by executing the
        following command:</para>

        <programlisting>source mysql.drop.create.sql </programlisting>

        <para>Once the script executes, you should have the folling output in
        the MySQL command window:</para>

        <figure>
          <title>Loading the database create scripts for MySQL</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/load_mysql_shell2.jpg" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>

    <section>
      <title>Last Steps</title>

      <para>After these steps, there is not yet any data present in the
      tables. For the jBPM webapp to work, you should at least create some
      records in the jbpm_id_user table. In order to have exactly the same
      entries in this table as the default distribution of the starter's kit
      running on HSQLDB, we suggest to run the script below.</para>

      <programlisting>insert into JBPM_ID_USER (ID_, CLASS_, NAME_, EMAIL_, PASSWORD_) 
       values ('1', 'U', 'user', 'sample.user@sample.domain', 'user');
insert into JBPM_ID_USER (ID_,CLASS_, NAME_, EMAIL_, PASSWORD_) 
       values ('2', 'U', 'manager', 'sample.manager@sample.domain', 'manager');
insert into JBPM_ID_USER (ID_,CLASS_, NAME_, EMAIL_, PASSWORD_) 
       values ('3', 'U', 'shipper', 'sample.shipper@sample.domain', 'shipper');
insert into JBPM_ID_USER (ID_,CLASS_, NAME_, EMAIL_, PASSWORD_) 
       values ('4', 'U', 'admin', 'sample.admin@sample.domain', 'admin');</programlisting>
    </section>

    <section>
      <title>Update the JBoss jBPM Server Configuration</title>

      <para>Before we can really use our newly created database with the JBoss
      jBPM default webapp we will have to do some updates to the JBoss jBPM
      configuration. The location of the server is
      '${JBPM_SDK_HOME}/jbpm-server'. The first thing we will be doing to
      update this configuration is create a new datasource that points to our
      JbpmDB database. In a second step, we will make sure that the default
      webapp is talking to this datasource and not to the HSQLDB datasource
      anymore.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;datasources&gt;
  &lt;local-tx-datasource&gt;
    &lt;jndi-name&gt;JbpmDS&lt;/jndi-name&gt;
    &lt;connection-url&gt;jdbc:postgresql://localhost:5432/JbpmDB&lt;/connection-url&gt;
    &lt;driver-class&gt;org.postgresql.Driver&lt;/driver-class&gt;
    &lt;user-name&gt;user&lt;/user-name&gt;
    &lt;password&gt;password&lt;/password&gt;
    &lt;metadata&gt;
      &lt;type-mapping&gt;PostgreSQL 8.1&lt;/type-mapping&gt;
    &lt;/metadata&gt;
  &lt;/local-tx-datasource&gt;
&lt;/datasources&gt;</programlisting>

      <para>For MySQL, the datasource definition would look as follows:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;datasources&gt;
  &lt;local-tx-datasource&gt;
    &lt;jndi-name&gt;JbpmDS&lt;/jndi-name&gt;
    &lt;connection-url&gt;jdbc:mysql://localhost:3306/jbpmdb&lt;/connection-url&gt;
    &lt;driver-class&gt;com.mysql.jdbc.Driver&lt;/driver-class&gt;
    &lt;user-name&gt;root&lt;/user-name&gt;
    &lt;password&gt;root&lt;/password&gt;
    &lt;metadata&gt;
      &lt;type-mapping&gt;MySQL&lt;/type-mapping&gt;
    &lt;/metadata&gt;
  &lt;/local-tx-datasource&gt;
&lt;/datasources&gt;</programlisting>

      <para>In order to create a new datasource, you should create a file
      named e.g. jbpm-ds.xml with the contents shown in the program listing
      above. Of course it is possible that you have to change some of the
      values in this file to accommodate for your particular situation. You
      then simply save this file in the
      ${JBPM_SDK_HOME}/jbpm-server/server/jbpm/deploy folder. Congratulations,
      you just created a new DataSource for your JBoss jBPM server. Well,
      almost... To make things really work you will have to copy the correct
      JDBC driver to the ${JBPM_SDK_HOME}/jbpm-server/server/jbpm/lib folder.
      We already used this JDBC driver above when we were installing it in
      DBVisualizer to be able to browse our newly created database. The file
      is named 'postgresql-8.1-*.jdbc3.jar' and it can be found in the jdbc
      subfolder of your PostgreSQL installation folder.</para>

      <para>For MySQL, copy the jdbc driver installed from the MySQL
      ConnectorJ package. The version you need to use is currently the MySQL
      Connector/J 3.1 available from
      http://www.mysql.com/products/connector/j/</para>

      <para>If you are not using PostgreSQL or MySQL and are wondering how to
      create your own data source definition for your particular database, you
      can find sample data source definitions in the JBoss Application Server
      distribution under the 'docs/examples/jca' folder. if your database has
      a JDBC driver available for it, you should have no problems using it
      with jBPM.</para>

      <para>Making the default webapp talk to the correct datasource is again
      not very difficult. The first step in doing this is simply locate the
      'jboss-service.xml' file in the folder
      '${JBPM_SDK_HOME}/jbpm-server/server/jbpm/deploy/jbpm.sar/META-INF'.
      Change the contents of this file with the contents of the listing below.
      An attentive reader will notice that the only difference is an exchange
      of the token 'DefaultDS' by 'JbpmDS'.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;server&gt;
  &lt;mbean code="org.jbpm.db.jmx.JbpmService" 
         name="jboss.jbpm:name=DefaultJbpm,service=JbpmService"
         description="Default jBPM Service"&gt;
    &lt;attribute name="JndiName"&gt;java:/jbpm/JbpmConfiguration&lt;/attribute&gt;
    &lt;depends&gt;jboss.jca:service=DataSourceBinding,name=JbpmDS&lt;/depends&gt;
  &lt;/mbean&gt;
&lt;/server&gt;</programlisting>

      <para>The last thing we have to do to make everything run is a
      manipulation of the 'jbpm.sar.cfg.jar' file in the
      '${JBPM_SDK_HOME}/jbpm-server/server/jbpm/deploy/jbpm.sar' folder. You
      have to extract this file somewhere and open the file named
      'hibernate.cfg.xml'. Then replace the section containing the jdbc
      connection properties. This section should look like shown in the
      listing below. There are two changes in this file : the
      hibernate.connection.datasource property should point to the JbpmDS
      datasource we created as the first step in this section and the
      hibernate.dialect property should match the PostgreSQL or MySQL
      dialect.</para>

      <para>Below is a sample of the 2 changes required, comment out the
      version of the dialect you don't need depending on the database you are
      using. You can get a list of supported database Dialect types from here
      http://www.hibernate.org/hib_docs/v3/reference/en/html/session-configuration.html#configuration-optional-dialects</para>

      <programlisting>&lt;?xml version='1.0' encoding='utf-8'?&gt;

&lt;!DOCTYPE hibernate-configuration PUBLIC
          "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
          "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;

&lt;hibernate-configuration&gt;
  &lt;session-factory&gt;

    &lt;!-- jdbc connection properties --&gt;
    &lt;!-- comment out the dialect not needed! --&gt;
    &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.PostgreSQLDialect&lt;/property&gt;
    &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;
    &lt;property name="hibernate.connection.datasource"&gt;java:/JbpmDS&lt;/property&gt;
        
    &lt;!-- other hibernate properties 
    &lt;property name="hibernate.show_sql"&gt;true&lt;/property&gt;
    &lt;property name="hibernate.format_sql"&gt;true&lt;/property&gt;
    --&gt;
    
    &lt;!-- ############################################ --&gt;
    &lt;!-- # mapping files with external dependencies # --&gt;
    &lt;!-- ############################################ --&gt;

    ...

  &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;</programlisting>

      <para>Now we are ready to fire up the server, and look if the webapp
      works. You will not be able to start any processes yet, as there are no
      processes deployed yet. To do this we refer to the document on process
      definition deployment.</para>
    </section>
  </section>

  <section id="databaseupgrades">
    <title>Database upgrades</title>

    <para>In the jbpm.db subproject, you can find:</para>

    <itemizedlist>
      <listitem>
         An SQL script to create the jBPM 3.0.2 schema (for Hypersonic) 
      </listitem>

      <listitem>
         An SQL script to create the jBPM 3.1 schema (for Hypersonic) 
      </listitem>

      <listitem>
         An SQL script to upgrade from a jBPM 3.0.2 schema to a jBPM 3.1 schema (for Hypersonic) 
      </listitem>

      <listitem>
         The ant scripts to create the schema update 
      </listitem>
    </itemizedlist>

    <para>The schema SQL scripts can be found in directory
    <literal>hsqldb/upgrade.scripts</literal>.</para>

    <para>To run the schema update tool for your database, follow these
    guidelines:</para>

    <itemizedlist>
      <listitem>
         Prerequisite: Make sure you installed the jbpm.db project right besides the jbpm project. In the starters-kit, this is automatically the case. If jbpm is installed in a different location, update the jbpm.3.location dir in build.properties accordingly. 
      </listitem>

      <listitem>
         Prerequisite: You should have the proper JDBC driver jar for your database. 
      </listitem>

      <listitem>
         Update the properties in the build.properties in the root of the jbpm.db project: 

        <itemizedlist>
          <listitem><emphasis
          role="bold">upgrade.hibernate.properties</emphasis>: a properties
          file that contains the connection properties to your database in
          hibernate style.</listitem>

          <listitem><emphasis role="bold">upgrade.libdir</emphasis>: the
          directory containing the jdbc driver jars for your
          database.</listitem>

          <listitem><emphasis
          role="bold">upgrade.old.schema.script</emphasis>: the schema
          generation script to create the old database schema. (if it already
          exists, you don't need this property.)</listitem>
        </itemizedlist>

         
      </listitem>

      <listitem>
         For creating the old schema and then calculating the differences, run the ant script 

        <emphasis role="bold">
          <literal>'ant upgrade.db.script'</literal>
        </emphasis>

         
      </listitem>

      <listitem>
         For only calculating the update script without first loading the old db schema, run the ant script 

        <emphasis role="bold">
          <literal>'ant upgrade.hibernate.schema.update'</literal>
        </emphasis>

         
      </listitem>

      <listitem>
         After successfull completion, you'll find the upgrade script in 

        <literal>build/database.upgrade.sql</literal>

         
      </listitem>
    </itemizedlist>

    <para>For upgrading from jBPM 3.0.2 to jBPM 3.1, the generated upgrade SQL
    script (for HSQLDB) is illustrated in the listing below:</para>

    <programlisting># New JBPM_MESSAGE table
create table JBPM_MESSAGE (
  ID_ bigint generated by default as identity (start with 1), 
  CLASS_ char(1) not null, 
  DESTINATION_ varchar(255), 
  EXCEPTION_ varchar(255), 
  ISSUSPENDED_ bit, 
  TOKEN_ bigint, 
  TEXT_ varchar(255), 
  ACTION_ bigint, 
  NODE_ bigint, 
  TRANSITIONNAME_ varchar(255), 
  TASKINSTANCE_ bigint, 
  primary key (ID_)
);

# Added columns
alter table JBPM_ACTION add column ACTIONEXPRESSION_ varchar(255);
alter table JBPM_ACTION add column ISASYNC_ bit;
alter table JBPM_COMMENT add column VERSION_ integer;
alter table JBPM_ID_GROUP add column PARENT_ bigint;
alter table JBPM_NODE add column ISASYNC_ bit;
alter table JBPM_NODE add column DECISIONEXPRESSION_ varchar(255);
alter table JBPM_NODE add column ENDTASKS_ bit;
alter table JBPM_PROCESSINSTANCE add column VERSION_ integer;
alter table JBPM_PROCESSINSTANCE add column ISSUSPENDED_ bit;
alter table JBPM_RUNTIMEACTION add column VERSION_ integer;
alter table JBPM_SWIMLANE add column ACTORIDEXPRESSION_ varchar(255);
alter table JBPM_SWIMLANE add column POOLEDACTORSEXPRESSION_ varchar(255);
alter table JBPM_TASK add column ISSIGNALLING_ bit;
alter table JBPM_TASK add column ACTORIDEXPRESSION_ varchar(255);
alter table JBPM_TASK add column POOLEDACTORSEXPRESSION_ varchar(255);
alter table JBPM_TASKINSTANCE add column CLASS_ char(1);
alter table JBPM_TASKINSTANCE add column ISSUSPENDED_ bit;
alter table JBPM_TASKINSTANCE add column ISOPEN_ bit;
alter table JBPM_TIMER add column ISSUSPENDED_ bit;
alter table JBPM_TOKEN add column VERSION_ integer;
alter table JBPM_TOKEN add column ISSUSPENDED_ bit;
alter table JBPM_TOKEN add column SUBPROCESSINSTANCE_ bigint;
alter table JBPM_VARIABLEINSTANCE add column TASKINSTANCE_ bigint;

# Added constraints
alter table JBPM_ID_GROUP add constraint FK_ID_GRP_PARENT foreign key (PARENT_) references JBPM_ID_GROUP;
alter table JBPM_MESSAGE add constraint FK_MSG_TOKEN foreign key (TOKEN_) references JBPM_TOKEN;
alter table JBPM_MESSAGE add constraint FK_CMD_NODE foreign key (NODE_) references JBPM_NODE;
alter table JBPM_MESSAGE add constraint FK_CMD_ACTION foreign key (ACTION_) references JBPM_ACTION;
alter table JBPM_MESSAGE add constraint FK_CMD_TASKINST foreign key (TASKINSTANCE_) references JBPM_TASKINSTANCE;
alter table JBPM_TOKEN add constraint FK_TOKEN_SUBPI foreign key (SUBPROCESSINSTANCE_) references JBPM_PROCESSINSTANCE;
alter table JBPM_VARIABLEINSTANCE add constraint FK_VAR_TSKINST foreign key (TASKINSTANCE_) references JBPM_TASKINSTANCE;</programlisting>
  </section>

  <section>
    <title>Starting hsqldb manager on JBoss</title>

    <para>Not really crucial for jBPM, but in some situations during
    development, it can be convenient to open the hypersonic database manager
    that gives you access to the data in the JBoss hypersonic database.</para>

    <para>Start by opening a browser and navigating to the jBPM server JMX
    console. The URL you should use in your browser for doing this is :
    http://localhost:8080/jmx-console. Of course this will look slightly
    different if you are running jBPM on another machine or on another port
    than the default one. A screenshot of the resulting page is shown in the
    figure below.</para>

    <figure>
      <title>The JBoss jBPM JMX Console</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/jmx_console.jpg" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>If you click on the link 'database=jbpmDB,service=Hypersonic' under
    the JBoss entries, you will see the JMX MBean view of the HSQLDB database
    manager. Scrolling a bit down on this page, in the operations section, you
    will see the 'startDatabaseManager()' operation. This is illustrated in
    the screenshot below.</para>

    <figure>
      <title>The HSQLDB MBean</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/hsqldb_mbean.jpg" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Clicking the invoke button will start the HSQLDB Database Manager
    application. This is a rather harsh database client tool, but it works ok
    for our purposes of executing this generated script. You may have to
    ALT-TAB to get to view this application as it may be covered by another
    window. The figure below shows this application with the above script
    loaded and ready to execute. Pushing the 'Execute SQL' button will execute
    the script and effectively update your database.</para>

    <figure>
      <title>The HSQLDB Database Manager</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/hsqldb_dbm.jpg" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
</chapter>
