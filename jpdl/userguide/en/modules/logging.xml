<chapter id="logging">
  <title>Logging</title>

  <para>The purpose of logging is to keep track of the history of a 
  process execution.  As the runtime data of a process execution changes, 
  all the delta's are stored in the logs.</para>
  
  <para>Process logging, which is covered in this chapter, is not to be confused 
  with software logging.  Software logging traces the execution of a software 
  program (usually for debugging purposes).  Process logging traces the execution 
  of process instances.</para>
  
  <para>There are various use cases for process logging information.  Most obvious is 
  the consulting of the process history by participants of a process execution.  
  </para>
  
  <para>Another use case is 
  Business Activity Monitoring (BAM).  BAM will query or analyse the logs of process 
  executions to find usefull statistical information about the business process.  E.g.
  how much time is spend on average in each step of the process ?  Where are the 
  bottlenecks in the process ? ...  This information is key to implement real business 
  process management in an organisation.  Real business process management is about how 
  an organisation manages their processes, how these are supported by information technology
  *and* how these two improve the other in an iterative process.
  </para>
  
  <para>Next use case is the undo functionality.  Process logs can be used to implement 
  the undo.  Since the logs contain the delta's of the runtime information, the logs can be 
  played in reverse order to bring the process back into a previous state.
  </para>

  <section id="creationoflogs">
    <title>Creation of logs</title>
    <para>Logs are produced by jBPM modules while they are running process executions.
    But also users can insert process logs.  A log entry is a java object that inherits from 
    <literal>org.jbpm.logging.log.ProcessLog</literal>.  Process log entries are added to 
    the <literal>LoggingInstance</literal>.  The <literal>LoggingInstance</literal> is an 
    optional extension of the <literal>ProcessInstance</literal>.
    </para>
    
    <para>Various kinds of logs are generated by jBPM : graph execution logs, context logs 
    and task management logs.  For more information about the specific data contained in 
    those logs, we refer to the javadocs.  A good starting point is the class 
    <literal>org.jbpm.logging.log.ProcessLog</literal> since from that class you can navigate
    down the inheritance tree.</para>
    
    <para>The <literal>LoggingInstance</literal> will collect all the log entries.  When
    the <literal>ProcessInstance</literal> is saved, all the logs in the <literal>LoggingInstance</literal>
    will be flushed to the database.  The <literal>logs</literal>-field of a <literal>ProcessInstance</literal> 
    is not mapped with hibernate to avoid that logs are retrieved from the database in each transactions.  
    Each <literal>ProcessLog</literal> is made in the context
    of a path of execution (<literal>Token</literal>) and hence, the <literal>ProcessLog</literal>
    refers to that token.  The <literal>Token</literal> also serves as an index-sequence generator 
    for the index of the <literal>ProcessLog</literal> in the <literal>Token</literal>.  This will 
    be important for log retrieval.  That way, logs that are produced in subsequent transactions
    will have sequential sequence numbers. (wow, that a lot of seq's in there :-s ).</para>
    
    <para>The API method for adding process logs is the following.
    </para>
    
    <programlisting>public class LoggingInstance extends ModuleInstance {
  ...
  public void addLog(ProcessLog processLog) {...}
  ...
}</programlisting>

    <para>The UML diagram for logging information looks like this:</para>
    
    <figure id="logging.model.image">
      <title>The jBPM logging information class diagram</title>
      <mediaobject><imageobject><imagedata align="center" fileref="images/logging.model.gif"/></imageobject></mediaobject>
    </figure>

    <para>A <literal>CompositeLog</literal>
    is a special kind of log entry.  It serves as a parent log for a number of child logs, 
    thereby creating the means for a hierarchical structure in the logs.
    The API for inserting a log is the following.</para>

    <programlisting>public class LoggingInstance extends ModuleInstance {
  ...
  public void startCompositeLog(CompositeLog compositeLog) {...}
  public void endCompositeLog() {...}
  ...
}</programlisting>

    <para>The <literal>CompositeLog</literal>s should always be called in a 
    <literal>try-finally</literal>-block to make sure that the hierarchical 
    structure of logs is consistent.  For example:</para>
    
    <programlisting>startCompositeLog(new MyCompositeLog());
try {
  ...
} finally {
  endCompositeLog();
}</programlisting>

  </section>  

  <section id="logconfigurations">
    <title>Log configurations</title>
    <para>For deployments where logs are not important, it suffices to remove the logging line in the 
    jbpm-context section of the jbpm.cfg.xml configuration file:
    </para>
    <programlisting>&lt;service name='logging' factory='org.jbpm.logging.db.DbLoggingServiceFactory' /&gt;</programlisting>
    <para>In case you want to filter the logs, you need to write a custom implementation of the 
    LoggingService that is a subclass of DbLoggingService.  Also you need to create a custom 
    logging ServiceFactory and specify that one in the factory attribute.
    </para>
  </section>

  <section id="logretrieval">
    <title>Log retrieval</title>
    <para>As said before, logs cannot be retrieved from the database by navigating 
    the LoggingInstance to its logs.  Instead, logs of a process instance should always 
    be queried from the database.  The <literal>LoggingSession</literal> has 2 methods 
    that serve this purpose.
    </para>
    
    <para>The first method retrieves all the logs for a process instance.  These logs
    will be grouped by token in a Map.  The map will associate a List of ProcessLogs
    with every Token in the process instance.  The list will contain the ProcessLogs 
    in the same ordered as they were created.</para>
    
    <programlisting>public class LoggingSession {
  ...
  public Map findLogsByProcessInstance(long processInstanceId) {...}
  ...
}</programlisting>

    <para>The second method retrieves the logs for a specific Token. The returned list 
    will contain the ProcessLogs in the same ordered as they were created.</para>
    
    <programlisting>public class LoggingSession {
  public List findLogsByToken(long tokenId) {...}
  ...
}</programlisting>

  </section>  

  <section id="datawarehousing">
    <title>Database warehousing</title>
    <para>Sometimes you may want to apply data warehousing techniques to the jbpm 
    process logs.  Data warehousing means that you create a separate database containing 
    the process logs to be used for various purposes.
    </para>
    
    <para>There may be many reasons why you want to create a data warehouse with the 
    process log information.  Sometimes it might be to offload heavy queryies from the 
    'live' production database.  In other situations it might be to do some extensive
    analysis.  Data warehousing even might be done on a modified database schema which is 
    optimized for its purpose.</para>
    
    <para>In this section, we only want to propose the technique of warehousing in 
    the context of jBPM.  The purposes are too diverse, preventing a generic solution
    to be included in jBPM that could cover all those requirements.</para>
  </section>  

</chapter>
