<?xml version="1.0"?>

<project name="jbpm.bam.console" default="deploy" basedir=".">
	<!-- project specific properties -->
	<property name="jbpm.root" value=".." />

	<!-- properties files -->
	<property file="${user.home}/jbpm/build.properties" />
	<property file="${user.home}/jbpm/build-bam.properties" />
	<property file="${jbpm.root}/build/profiles/${profile}.profile.properties" />
	<property file="${jbpm.root}/build/build.properties" />
	<property file="build-bam.properties" />

	<!-- import base project build file -->
	<import file="${jbpm.root}/build/base.project.build.xml" />

	<!-- Give user a chance to override without editing this file or typing -D -->
	<property file="${basedir}/build.properties" />

	<property name="profile" value="dev" />
	<property file="build-${profile}.properties" />

	<!-- set global properties for this build -->
	<property name="project.name" value="bamconsole" />
	<property name="dist.dir" value="target/dist" />
	<property name="src.model.dir" value="src/model" />
	<property name="src.action.dir" value="src/action" />
	<property name="src.test.dir" value="src/test" />
	<property name="lib.dir" value="${local.repository}" />
	<property name="ear.dir" value="target/${project.name}.ear" />
	<property name="jar.dir" value="target/${project.name}.jar" />
	<property name="war.dir" value="target/${project.name}.war" />
	<property name="test.dir" value="target/test" />
	<property name="bootstrap.dir" value="${basedir}/bootstrap" />
	<property name="deploy.dir" value="${jboss.home}/server/${server.instance.name}/deploy" />
	<property name="ear.deploy.dir" value="${deploy.dir}/${project.name}.ear" />
	<property name="jar.deploy.dir" value="${ear.deploy.dir}/${project.name}.jar" />
	<property name="war.deploy.dir" value="${ear.deploy.dir}/${project.name}.war" />
	<property name="testng.jar" value="${basedir}/lib/testng.jar" />
	<property name="javac.debug" value="true" />
	<property name="javac.deprecation" value="false" />
	<property name="debug" value="false" />

	<!--Properties for validating configuration files -->
	<property name="validate.resources.dir" value="${basedir}/exploded-archives" />
	<property name="schema.dir" value="${basedir}/exploded-archives/schemas" />
	<property name="src.schema.dir" value="${schema.dir}/org/jboss/seam" />
	<property name="schema.version" value="2.0" />

	<target name="define.bam.libs.classpath" depends="get.bam.libs,jpdl.jar.build.from.source,identity.jar.build.from.source">
		<path id="build.classpath">
			<fileset dir="${local.repository}">
				<!-- jBPM libraries -->
				<include name="${lib.jbpm.jpdl.jar.path}" />
				<include name="${lib.jbpm.identity.jar.path}" />
				<!-- Dependency libraries -->
				<include name="${local.repository}/licenses/lgpl.txt" />
				<include name="${lib.bam.hibernate.path}" />
				<include name="${lib.bam.hibernate-annotations.path}" />
				<include name="${lib.bam.hibernate-commons-annotations.path}" />
				<include name="${lib.bam.hibernate-validator.path}" />
				<include name="${lib.bam.jsf-api.path}" />
				<include name="${lib.bam.persistence-api.path}" />
				<include name="${lib.bam.ejb-api.path}" />
				<include name="${lib.bam.jboss-el.path}" />
				<include name="${lib.bam.jboss-seam.path}" />
				<include name="${lib.bam.jboss-seam-ui.path}" />
				<include name="${lib.bam.jboss-seam-mail.path}" />
				<include name="${lib.bam.jboss-seam-ioc.path}" />
				<include name="${lib.bam.jboss-seam-debug.path}" />
				<include name="${lib.bam.jboss-seam-pdf.path}" />
				<include name="${lib.bam.jboss-seam-remoting.path}" />
				<include name="${lib.bam.jboss-seam-gen.path}" />
				<include name="${lib.bam.apache-digester.path}" />
				<include name="${lib.bam.apache-beanutils.path}" />
				<include name="${lib.bam.jcommon.path}" />
				<include name="${lib.bam.jfreechart.path}" />
				<include name="${lib.bam.facelets.path}" />
				<include name="${lib.bam.richfaces-api.path}" />
				<include name="${lib.bam.richfaces-impl.path}" />
				<include name="${lib.bam.richfaces-ui.path}" />
				<include name="${lib.bam.drools-core.path}" />
				<include name="${lib.bam.drools-compiler.path}" />
				<include name="${lib.bam.mvl14.path}" />
				<include name="${lib.bam.jasperreports.path}" />
				<include name="${lib.bam.poi.path}" />
				<include name="${lib.bam.poi.contrib.path}" />
				<include name="${lib.bam.poi.scratchpad.path}" />
				<!-- Unit testing libraries -->
				<include name="${lib.junit.path}" />
				<include name="${lib.dom4j.path}" />
				<include name="${lib.commons.logging.path}" />
				<include name="${lib.commons.collections.path}" />
				<include name="${lib.hsqldb.path}" />
				<include name="${lib.cglib.path}" />
				<include name="${lib.asm.path}" />
				<include name="${lib.antlr.path}" />
				<include name="${lib.jboss.j2ee.path}" />
				<include name="${lib.servlet.path}" />
			</fileset>
		</path>
	</target>

	<target name="init" description="Initialize the build" depends="define.bam.libs.classpath">
		<mkdir dir="${jar.dir}" />
		<mkdir dir="${ear.dir}" />
		<mkdir dir="${war.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="compile" depends="init" description="Compile the Java source code" unless="eclipse.running">
		<javac classpathref="build.classpath" destdir="${jar.dir}" debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.model.dir}" />
			<src path="${src.action.dir}" />
		</javac>
	</target>

	<target name="copyclasses" depends="init" description="Copy the classes that were compiled by eclipse" if="eclipse.running">
		<copy todir="${jar.dir}">
			<fileset dir="classes/model">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="classes/action">
				<include name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="compile,copyclasses" description="Build the distribution .jar file">
		<copy todir="${jar.dir}">
			<fileset dir="${basedir}/resources">
				<include name="seam.properties" />
			</fileset>
		</copy>
		<copy todir="${jar.dir}/META-INF">
			<fileset dir="${basedir}/resources/META-INF">
				<include name="ejb-jar.xml" />
			</fileset>
		</copy>
		<copy tofile="${jar.dir}/META-INF/persistence.xml" file="${basedir}/resources/META-INF/persistence-${profile}.xml" overwrite="true" />
		<copy tofile="${jar.dir}/import.sql" file="${basedir}/resources/import-${profile}.sql" overwrite="true" />
	</target>

	<target name="war" depends="compile" description="Build the distribution .war file">
		<copy todir="${war.dir}">
			<fileset dir="${basedir}/view" />
		</copy>
		<copy todir="${war.dir}/WEB-INF">
			<fileset dir="${basedir}/resources/WEB-INF">
				<include name="*.*" />
				<include name="classes/**/*.*" />
				<exclude name="classes/**/*.class" />
			</fileset>
			<filterset>
				<filter token="debug" value="${debug}" />
				<filter token="jndiPattern" value="${project.name}/#{ejbName}/local" />
				<filter token="embeddedEjb" value="false" />
			</filterset>
		</copy>
		<copy todir="${war.dir}/WEB-INF">
			<fileset dir="${basedir}/resources/WEB-INF">
				<include name="lib/*.*" />
				<include name="classes/**/*.class" />
			</fileset>
		</copy>
		<copy tofile="${war.dir}/WEB-INF/lib/richfaces-impl.jar" file="${lib.bam.richfaces-impl.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/oscache.jar" file="${lib.oscache.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/jsf-facelets.jar" file="${lib.bam.facelets.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/jboss-seam-ui.jar" file="${lib.bam.jboss-seam-ui.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/jboss-seam-pdf.jar" file="${lib.bam.jboss-seam-pdf.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/jboss-seam-mail.jar" file="${lib.bam.jboss-seam-mail.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/jboss-seam-remoting.jar" file="${lib.bam.jboss-seam-remoting.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/jboss-seam-ioc.jar" file="${lib.bam.jboss-seam-ioc.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/jboss-seam-debug.jar" file="${lib.bam.jboss-seam-debug.local}" />
		<copy tofile="${war.dir}/WEB-INF/lib/richfaces-ui.jar" file="${lib.bam.richfaces-ui.local}" />

		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${basedir}/resources">
				<include name="messages*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="ear" description="Build the EAR">
		<copy todir="${ear.dir}">
			<fileset dir="${basedir}/resources">
				<include name="*jpdl.xml" />
				<include name="hibernate.cfg.xml" />
				<include name="jbpm.cfg.xml" />
				<include name="dashboard.cfg.xml" />
				<include name="*.drl" />
			</fileset>
		</copy>

		<copy tofile="${ear.dir}/jboss-seam.jar" file="${lib.bam.jboss-seam.local}" />
		<copy tofile="${ear.dir}/lib/jbpm-jpdl.jar" file="${lib.jbpm.jpdl.jar.local}" />
		<copy tofile="${ear.dir}/lib/jbpm-identity.jar" file="${lib.jbpm.identity.jar.local}" />
		<copy tofile="${ear.dir}/lib/jboss-el.jar" file="${lib.bam.jboss-el.local}" />
		<copy tofile="${ear.dir}/lib/richfaces-api.jar" file="${lib.bam.richfaces-api.local}" />
		<copy tofile="${ear.dir}/lib/mvel14.jar" file="${lib.bam.mvel14.local}" />
		<copy tofile="${ear.dir}/lib/antlr-runtime.jar" file="${lib.bam.antlr-runtime.local}" />
		<copy tofile="${ear.dir}/lib/drools-core.jar" file="${lib.bam.drools-core.local}" />
		<copy tofile="${ear.dir}/lib/drools-compiler.jar" file="${lib.bam.drools-compiler.local}" />
		<copy tofile="${ear.dir}/lib/jasperreports.jar" file="${lib.bam.jasperreports.local}" />
		<copy tofile="${ear.dir}/lib/commons-digester.jar" file="${lib.bam.apache-digester.local}" />
		<copy tofile="${ear.dir}/lib/commons-beanutils.jar" file="${lib.bam.apache-beanutils.local}" />
		<copy tofile="${ear.dir}/lib/itext.jar" file="${lib.bam.itext.local}" />
		<copy tofile="${ear.dir}/lib/jfreechart.jar" file="${lib.bam.jfreechart.local}" />
		<copy tofile="${ear.dir}/lib/jcommon.jar" file="${lib.bam.jcommon.local}" />
		<copy tofile="${ear.dir}/lib/poi.jar" file="${lib.bam.poi.local}" />
		<copy tofile="${ear.dir}/lib/poi-contrib.jar" file="${lib.bam.poi.contrib.local}" />
		<copy tofile="${ear.dir}/lib/poi-scratchpad.jar" file="${lib.bam.poi.scratchpad.local}" />

		<copy todir="${ear.dir}/META-INF">
			<fileset dir="${basedir}/resources/META-INF">
				<include name="application.xml" />
				<include name="jboss-app.xml" />
			</fileset>
		</copy>
	</target>

	<target name="package" depends="jar,war,ear" description="Package the archives">
		<jar jarfile="${dist.dir}/${project.name}.jar" basedir="${jar.dir}" />
		<jar jarfile="${dist.dir}/${project.name}.war" basedir="${war.dir}" />
		<jar jarfile="${dist.dir}/${project.name}.ear">
			<fileset dir="${ear.dir}" />
			<fileset dir="${dist.dir}">
				<include name="${project.name}.jar" />
				<include name="${project.name}.war" />
			</fileset>
		</jar>
	</target>

	<target name="datasource">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy todir="${deploy.dir}">
			<fileset dir="${basedir}/resources">
				<include name="${project.name}-${profile}-ds.xml" />
			</fileset>
		</copy>
	</target>

	<target name="explode" depends="jar,war,ear,datasource" description="Deploy the exploded archive">
		<fail unless="jboss.home">jboss.home not set</fail>

		<mkdir dir="${jar.deploy.dir}" />
		<mkdir dir="${war.deploy.dir}" />

		<copy todir="${jar.deploy.dir}">
			<fileset dir="${jar.dir}" />
		</copy>
		<copy todir="${war.deploy.dir}">
			<fileset dir="${war.dir}" />
		</copy>
		<copy todir="${ear.deploy.dir}">
			<fileset dir="${ear.dir}" />
		</copy>
	</target>

	<target name="unexplode" description="Undeploy the exploded archive">
		<delete failonerror="no">
			<fileset dir="${ear.deploy.dir}">
				<exclude name="**/*.jar" />
			</fileset>
		</delete>
		<delete file="${deploy.dir}/${project.name}-${profile}-ds.xml" failonerror="no" />
		<delete dir="${ear.deploy.dir}" failonerror="no" />
	</target>

	<target name="restart" depends="explode" description="Restart the exploded archive">
		<touch file="${ear.deploy.dir}/META-INF/application.xml" />
	</target>

	<target name="deploy" depends="package,datasource" description="Deploy to JBoss AS">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy todir="${deploy.dir}" file="${dist.dir}/${project.name}.ear" />
	</target>

	<target name="undeploy" description="Undeploy the example from JBoss">
		<delete file="${deploy.dir}/${project.name}.ear" />
		<delete file="${deploy.dir}/${project.name}-dev-ds.xml" />
		<delete file="${deploy.dir}/${project.name}-prod-ds.xml" />
	</target>

	<target name="clean" description="Cleans up the build directory">
		<delete dir="${dist.dir}" />
		<delete dir="${ear.dir}" />
		<delete dir="${war.dir}" />
		<delete dir="${jar.dir}" />
		<delete dir="${src.schema.dir}" failonerror="no" />
		<delete dir="${basedir}/test-report" />
		<delete dir="${basedir}/test-output" />
		<delete failonerror="no">
			<fileset dir="${test.dir}">
				<exclude name="**/*.class" if="eclipse.running" />
			</fileset>
		</delete>
	</target>

	<target name="validateConfiguration" depends="war,ear,jar" description="Validate the xml configuration files">
		<mkdir dir="${schema.dir}" />
		<unjar src="${lib.dir}/jboss-seam.jar" dest="${schema.dir}">
			<patternset>
				<include name="org/jboss/seam/*.xsd" />
				<include name="org/jboss/seam/*.dtd" />
			</patternset>
		</unjar>
		<ant antfile="validate.xml" target="validateConfiguration" />
	</target>

	<target name="get.bam.libs" description="gets the bam libraries if an update is needed" unless="bam.libs.up.to.date">
		<condition property="bam.libs.up.to.date">
			<and>
				<available file="${local.repository}/licenses/lgpl.txt" />
				<available file="${lib.bam.hibernate.local}" />
				<available file="${lib.bam.hibernate-annotations.local}" />
				<available file="${lib.bam.hibernate-validator.local}" />
				<available file="${lib.bam.jsf-api.local}" />
				<available file="${lib.bam.persistence-api.local}" />
				<available file="${lib.bam.ejb-api.local}" />
				<available file="${lib.bam.jboss-el.local}" />
				<available file="${lib.bam.jboss-seam.local}" />
				<available file="${lib.bam.jboss-seam-ui.local}" />
				<available file="${lib.bam.jboss-seam-mail.local}" />
				<available file="${lib.bam.jboss-seam-ioc.local}" />
				<available file="${lib.bam.jboss-seam-debug.local}" />
				<available file="${lib.bam.jboss-seam-pdf.local}" />
				<available file="${lib.bam.jboss-seam-remoting.local}" />
				<available file="${lib.bam.jboss-seam-gen.local}" />
				<available file="${lib.bam.apache-digester.local}" />
				<available file="${lib.bam.apache-beanutils.local}" />
				<available file="${lib.bam.jcommon.local}" />
				<available file="${lib.bam.jfreechart.local}" />
				<available file="${lib.bam.facelets.local}" />
				<available file="${lib.bam.richfaces-api.local}" />
				<available file="${lib.bam.richfaces-impl.local}" />
				<available file="${lib.bam.richfaces-ui.local}" />
				<available file="${lib.bam.drools-core.local}" />
				<available file="${lib.bam.drools-compiler.local}" />
				<available file="${lib.bam.mvl14.local}" />
				<available file="${lib.bam.antlr-runtime.local}" />
				<available file="${lib.bam.itext.local}" />
				<available file="${lib.bam.jasperreports.local}" />
			</and>
		</condition>
		<ant target="get.bam.libs.dependencies" />
	</target>

	<target name="get.bam.libs.dependencies" unless="bam.libs.up.to.date">
		<!-- EXTERNAL DEPENDENCIES (4/4): UPDATE LOCAL REPOSITORY -->
		<property name="remote.license.dir" value="${remote.repository}/licenses" />

		<!-- lgpl license is used to build the jpdl distribution package -->
		<mkdir dir="${local.repository}/licenses" />
		<get src="${remote.license.dir}/lgpl.txt" dest="${local.repository}/licenses/lgpl.txt" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.jboss.as.dir}" />
		<get src="${lib.jboss.as.remote}" dest="${lib.jboss.as.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.hibernate.dir}" />
		<get src="${lib.bam.hibernate.remote}" dest="${lib.bam.hibernate.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.hibernate-annotations.dir}" />
		<get src="${lib.bam.hibernate-annotations.remote}" dest="${lib.bam.hibernate-annotations.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.hibernate-commons-annotations.dir}" />
		<get src="${lib.bam.hibernate-commons-annotations.remote}" dest="${lib.bam.hibernate-commons-annotations.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.hibernate-validator.dir}" />
		<get src="${lib.bam.hibernate-validator.remote}" dest="${lib.bam.hibernate-validator.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jsf-api.dir}" />
		<get src="${lib.bam.jsf-api.remote}" dest="${lib.bam.jsf-api.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.persistence-api.dir}" />
		<get src="${lib.bam.persistence-api.remote}" dest="${lib.bam.persistence-api.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.ejb-api.dir}" />
		<get src="${lib.bam.ejb-api.remote}" dest="${lib.bam.ejb-api.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-el.dir}" />
		<get src="${lib.bam.jboss-el.remote}" dest="${lib.bam.jboss-el.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-seam.dir}" />
		<get src="${lib.bam.jboss-seam.remote}" dest="${lib.bam.jboss-seam.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-seam-ui.dir}" />
		<get src="${lib.bam.jboss-seam-ui.remote}" dest="${lib.bam.jboss-seam-ui.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-seam-mail.dir}" />
		<get src="${lib.bam.jboss-seam-mail.remote}" dest="${lib.bam.jboss-seam-mail.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-seam-pdf.dir}" />
		<get src="${lib.bam.jboss-seam-pdf.remote}" dest="${lib.bam.jboss-seam-pdf.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-seam-ioc.dir}" />
		<get src="${lib.bam.jboss-seam-ioc.remote}" dest="${lib.bam.jboss-seam-ioc.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-seam-gen.dir}" />
		<get src="${lib.bam.jboss-seam-gen.remote}" dest="${lib.bam.jboss-seam-gen.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-seam-remoting.dir}" />
		<get src="${lib.bam.jboss-seam-remoting.remote}" dest="${lib.bam.jboss-seam-remoting.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jboss-seam-debug.dir}" />
		<get src="${lib.bam.jboss-seam-debug.remote}" dest="${lib.bam.jboss-seam-debug.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.apache-digester.dir}" />
		<get src="${lib.bam.apache-digester.remote}" dest="${lib.bam.apache-digester.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.apache-beanutils.dir}" />
		<get src="${lib.bam.apache-beanutils.remote}" dest="${lib.bam.apache-beanutils.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jcommon.dir}" />
		<get src="${lib.bam.jcommon.remote}" dest="${lib.bam.jcommon.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jfreechart.dir}" />
		<get src="${lib.bam.jfreechart.remote}" dest="${lib.bam.jfreechart.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.facelets.dir}" />
		<get src="${lib.bam.facelets.remote}" dest="${lib.bam.facelets.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.richfaces-api.dir}" />
		<get src="${lib.bam.richfaces-api.remote}" dest="${lib.bam.richfaces-api.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.richfaces-impl.dir}" />
		<get src="${lib.bam.richfaces-impl.remote}" dest="${lib.bam.richfaces-impl.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.richfaces-ui.dir}" />
		<get src="${lib.bam.richfaces-ui.remote}" dest="${lib.bam.richfaces-ui.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.drools-core.dir}" />
		<get src="${lib.bam.drools-core.remote}" dest="${lib.bam.drools-core.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.drools-compiler.dir}" />
		<get src="${lib.bam.drools-compiler.remote}" dest="${lib.bam.drools-compiler.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.mvel14.dir}" />
		<get src="${lib.bam.mvel14.remote}" dest="${lib.bam.mvel14.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.itext.dir}" />
		<get src="${lib.bam.itext.remote}" dest="${lib.bam.itext.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.antlr-runtime.dir}" />
		<get src="${lib.bam.antlr-runtime.remote}" dest="${lib.bam.antlr-runtime.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.jasperreports.dir}" />
		<get src="${lib.bam.jasperreports.remote}" dest="${lib.bam.jasperreports.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.poi.dir}" />
		<get src="${lib.bam.poi.remote}" dest="${lib.bam.poi.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.poi.contrib.dir}" />
		<get src="${lib.bam.poi.contrib.remote}" dest="${lib.bam.poi.contrib.local}" usetimestamp="true" ignoreerrors="true" />

		<mkdir dir="${local.repository}/${lib.bam.poi.scratchpad.dir}" />
		<get src="${lib.bam.poi.scratchpad.remote}" dest="${lib.bam.poi.scratchpad.local}" usetimestamp="true" ignoreerrors="true" />
	</target>

	<target name="compiletest" unless="eclipse.running" description="Compile the Java source code for the tests" depends="define.bam.libs.classpath">
		<mkdir dir="${test.dir}" />
		<javac classpathref="build.classpath" destdir="${test.dir}" debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.action.dir}" />
			<src path="${src.model.dir}" />
			<src path="${src.test.dir}" />
		</javac>
	</target>

	<target name="test" depends="compiletest" description="run the unit tests">
		<path id="test.classpath">
			<path refid="build.classpath" />
			<pathelement location="${test.dir}/resources" />
		</path>
		<delete dir="${test.dir}/test.results" />
		<mkdir dir="${test.dir}/test.results/xml" />
		<junit printsummary="yes" fork="yes" forkmode="once" showoutput="false">
			<classpath refid="${test.classpath}" />
			<formatter type="xml" />
			<batchtest todir="${test.dir}/test.results/xml">
				<fileset dir="${test.dir}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${test.dir}/test.results/xml">
			<fileset dir="." includes="**/TEST-*.xml" />
			<report todir="${test.dir}/test.results" />
		</junitreport>
	</target>

	<target name="build.jboss.configuration" depends="get.jboss.dependencies">
		<unzip src="${local.repository}/jbossas/${lib.jboss.version}/lib/jboss.zip" dest="${jboss.home}/.." />
	</target>

	<target name="deploy.exploded.to.jboss.configuration" depends="build.jboss.configuration">
		<antcall target="test" />
		<antcall target="explode" />
	</target>

	<target name="deploy.packaged.to.jboss.configuration" depends="build.jboss.configuration">
		<antcall target="test" />
		<antcall target="deploy" />
	</target>

	<target name="install" depends="package" description="Copy the ear and the datasource to the local repository">
		<copy tofile="${dist.dir}/${project.name}-ds.xml" file="${basedir}/resources/${project.name}-${profile}-ds.xml" />
		<copy tofile="${lib.jbpm.bamconsole.local}" file="${dist.dir}/${project.name}.ear" />
		<copy tofile="${lib.jbpm.bamconsole.datasource.local}" file="${dist.dir}/${project.name}-ds.xml" />
	</target>
</project>
