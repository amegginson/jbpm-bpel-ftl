<chapter id="deployment">

  <title>Deployment</title>

  <para>jPDL is an embeddable BPM engine, which means that you can take the jPDL 
    libraries and embed it into your own Java project, rather then installing a separate product
    and integrate with it.  One of the key aspects that make this possible is 
    minimizing the dependencies.  This chapter discusses the jbpm libraries and 
    their dependencies.
  </para>
  
  <section id="jbpmlibraries">
    <title>jBPM libraries</title>
    <para><emphasis role="bold">jbpm-jpdl.jar</emphasis> is the library
      with the core jpdl functionality.
    </para>
    <para><emphasis role="bold">jbpm-identity.jar</emphasis> is the 
      (optional) library containing an identity component as described in 
      <xref linkend="theidentitycomponent" />.
    </para>
  </section>
  
  <section id="javaruntimeenvironment">
    <title>Java runtime environment</title>
    <para>jBPM 3 requires J2SE 1.4.2+
    </para>
  </section>

  <section id="thirdpartylibraries">
    <title>Third party libraries</title>
    
    <para>All the libraries on which jPDL might have a dependency, are located in 
      the lib directory.
    </para>
    
    <para>In a minimal deployment, you can create and run processes with jBPM
      by putting only the commons-logging and dom4j library in your classpath.  
      Beware that persisting processes to a database is not supported.  The 
      dom4j library can be removed if you don't use the process xml parsing, 
      but instead build your object graph programatically.
    </para>

    <table frame="topbot" id="minimal.dependencies.table">
      <tgroup cols="3" rowsep="1" colsep="1">
        <colspec colname="c1" colwidth="1*"/>
        <colspec colname="c2" colwidth="2*"/>
        <thead>
          <row>
            <entry align="center">Library</entry>
            <entry align="center">Usage</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>commons-logging.jar</entry>
            <entry>logging in jbpm and hibernate</entry>
            <entry>The jBPM code logs to commons logging. The commons logging 
            library can be configured to dispatch the logs to e.g. 
            java 1.4 logging, log4j, ...  See 
            <ulink url="http://jakarta.apache.org/commons/logging/guide.html">
            the apache commons user guide</ulink> for more information on how 
            to configure commons logging.  if you're used to log4j, the easiest 
            way is to put the log4j lib and a log4j.properties in the classpath.
            commons logging will automatically detect this and use that configuration.
            </entry>
          </row>
          <row>
            <entry>dom4j.jar</entry>
            <entry>process definitions and hibernate persistence</entry>
            <entry>xml parsing</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
          
    <para>A typical deployment for jBPM will include persistent storage of 
      process definitions and process executions.  In that case, jBPM does 
      not have any dependencies outside hibernate and its dependent libraries.
    </para>

    <para>Of course, hibernate's required libraries depend on the environment
      and what features you use.  For details refer to the hibernate 
      documentation.  The next table gives an indication for a plain 
      standalone POJO development environment.
    </para>
    
    <table frame="topbot" id="typical.dependencies.table">
      <tgroup cols="3" rowsep="1" colsep="1">
        <colspec colname="c1" colwidth="1*"/>
        <colspec colname="c2" colwidth="2*"/>
        <thead>
          <row>
            <entry align="center">Library</entry>
            <entry align="center">Usage</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>hibernate3.jar</entry>
            <entry>hibernate persistence</entry>
            <entry>the best O/R mapper</entry>
          </row>
          <row>
            <entry>antlr.jar</entry>
            <entry>used in query parsing by hibernate persistence</entry>
            <entry>parser library</entry>
          </row>
          <row>
            <entry>cglib.jar</entry>
            <entry>hibernate persistence</entry>
            <entry>reflection library used for hibernate proxies</entry>
          </row>
          <row>
            <entry>commons-collections.jar</entry>
            <entry>hibernate persistence</entry>
            <entry></entry>
          </row>
          <row>
            <entry>asm.jar</entry>
            <entry>hibernate persistence</entry>
            <entry>asm byte code library</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
          
    <para>The beanshell library is optional.  If you don't include it, you won't be 
      able to use the beanshell integration in the jBPM process language and 
      you'll get a log message saying that jbpm couldn't load the Script class
      and hence, the script element won't be available.
    </para>
          
    <table frame="topbot" id="optional.dependencies.table">
      <tgroup cols="3" rowsep="1" colsep="1">
        <colspec colname="c1" colwidth="1*"/>
        <colspec colname="c2" colwidth="2*"/>
        <thead>
          <row>
            <entry align="center">Library</entry>
            <entry align="center">Usage</entry>
            <entry align="center">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>bsh.jar</entry>
            <entry>beanshell script interpreter</entry>
            <entry>Only used in the script's and decision's.  When you don't use
            these process elements, the beanshell lib can be removed, but then you 
            have to comment out the Script.hbm.xml mapping line in the 
            <literal>hibernate.cfg.xml</literal> </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
  </section>
  
  <section id="webapplication">
    <title>Web application</title>
    <para>In the deploy directory of the downloads, you can find 
      <emphasis role="bold">jbpm-console.war</emphasis>.  That web console 
      contains the jPDL libraries, configuration files and the required libraries
      to run this web application on JBoss. 
    </para>
    <para><emphasis>This war file does NOT include the hibernate libraries.</emphasis>
      That is because JBoss already includes the hibernate libraries.  To run this web app 
      on other servers like Tomcat, all you have to do is get the hibernate libraries 
      in the <literal>WEB-INF/lib</literal> directory in the war file.  Simplest 
      way to do that is to use the ant build script in this directory.
    </para>
    <para>Also, this war file can give you a good indication of how you could deploy 
      jbpm libraries and configuration files into your own web application.
    </para>
    <para>In the web app deployment descriptor, the <literal>JobExecutorLauncher</literal> 
      is configured. This will start the job executor when the web console 
      is deployed.  The job executor serves as the basis for executing timers and 
      asynchronous messages on the standard java platform.
    </para>
  </section>
  
  <section id="enterprisearchive">

    <title>Enterprise archive</title>

    <para>In the deploy directory of the downloads, you can find 
    <emphasis role="bold">jbpm-enterprise.ear</emphasis>.  That J2EE 1.4 compliant 
    enterprise archive includes: jPDL libraries, jBPM configuration files, the 
    jBPM web console, and a couple of enterprise beans.  In this package, jBPM 
    is configured for usage in an application server like JBoss.  The asynchronous 
    messaging service is here bound to JMS and the scheduler service is bound to the 
    EJB Timer Service.  So here in this .ear file, no <literal>JobExecutor</literal>
    is started. The persistence service is configured to participate in the overall 
    JTA transaction.
    </para>
    
    <para>Within the enterprise archive there are the following files:
    </para>

    <itemizedlist>
      <listitem><literal>jbpm-console.war</literal>: the console web application, adapted
      for J2EE integration
      </listitem>
      <listitem><literal>jbpm-enterprise.jar</literal>: the supporting enterprise beans
      </listitem>
      <listitem><literal>lib/jbpm-configs.jar</literal>: configuration files
      </listitem>
      <listitem><literal>lib/jbpm-identity.jar</literal>: identity component classes
      </listitem>
      <listitem><literal>lib/jbpm-jpdl.jar</literal>: standard jPDL classes
      </listitem>
      <listitem><literal>meta-inf/application.xml</literal>: J2EE app descriptor
      </listitem>
    </itemizedlist>

    <para><literal>jbpm-enterprise.jar</literal> contains the following EJB components:
    </para>

    <itemizedlist>
      <listitem><literal>CommandServiceBean</literal></listitem>
      <listitem><literal>CommandListenerBean</literal></listitem>
      <listitem><literal>JobListenerBean</literal></listitem>
      <listitem><literal>TimerEntityBean</literal></listitem>
    </itemizedlist>
    
    <para>These beans are J2EE 1.4 / EJB 2.1 compliant, to allow them to be deployed on a 
    variety of application servers. Note however that jBPM only provides deployment descriptors 
    for JBoss Application Server. All beans are deployed with the transaction-attribute
    <emphasis>Required</emphasis>. The source for the EJB classes and interfaces is in 
    <literal>src/enterprise</literal> and the javadocs in <literal>doc/javadoc-enterprise</literal>.
    A detailed description can be found in <xref linkend="enterprisebeans" />.
    </para>

    <para><literal>jbpm-configs.jar</literal> contains the following files:
    </para>

    <itemizedlist>
      <listitem><literal>jbpm.cfg.xml</literal>: the jBPM configuration</listitem>
      <listitem><literal>hibernate.cfg.xml</literal>: the Hibernate configuration</listitem>
      <listitem><literal>jbpm.mail.templates.xml</literal>: the e-mail templates</listitem>
    </itemizedlist>

    <para>Sections <xref linkend="enterprisejbpmconfig"/> and <xref 
    linkend="enterprisehibernateconfig"/> examine the enterprise-specific settings in the
    first two files. The last file is described in <xref linkend="mailtemplates"/>.</para>

  </section>

  <section id="theruntimeandsuite">
    <title>The jPDL Runtime and Suite</title>
    
    <section id="theruntime">
      <title>The runtime</title>
      <para>The jPDL runtime is all you need to get started with jPDL: jpdl libraries, third party 
      libraries, examples and documentation. It doesn't include the graphcal designer and web console 
      tooling, which is added in the suite package.
      </para>
      
      <table id="jpdlruntimedirectories">
        <title>jPDL runtime directories</title>
        <tgroup cols="2" rowsep="1" colsep="1">
          <colspec colname="c1" colwidth="1*"/>
          <colspec colname="c2" colwidth="2*"/>
          <thead>
            <row>
              <entry align="center">Directory</entry>
              <entry align="center">Content</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>config</entry>
              <entry>Contains all the configuration files. Note that for easy testing and development, 
              the current hibernate configuration points to the in-memory jbpm database.
              </entry>
            </row>
            <row>
              <entry>db</entry>
              <entry>Contains the scripts to create the jPDL tables in your DB. It includes a copy of 
              the wiki page about database compatibility.</entry>
            </row>
            <row>
              <entry>doc</entry>
              <entry>Contains the userguide and the javadocs for the jpdl sources and identity 
              sources</entry>
            </row>
            <row>
              <entry>examples</entry>
              <entry>Each example is a separate project that you can compile and run with ant or eclipse.</entry>
            </row>
            <row>
              <entry>lib</entry>
              <entry>All the third party libs and their licenses.</entry>
            </row>
            <row>
              <entry>src</entry>
              <entry>The sources for jpdl and the identity components.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
      
    <section id="thesuite">
      <title>The suite</title>
      <para>The jPDL suite is an extension of the jPDL runtime with 2 tools: a graphical designer 
      plugin for eclipse and a JBoss server that is preconfigured with a deployed version of the 
      jPDL runtime and console webapp. The included tools are all preconfigured to work nicely 
      together out of the box.
      </para>
      
      <table id="jpdlsuitedirectories">
        <title>jPDL suite extra directories</title>
        <tgroup cols="2" rowsep="1" colsep="1">
          <colspec colname="c1" colwidth="1*"/>
          <colspec colname="c2" colwidth="2*"/>
          <thead>
            <row>
              <entry align="center">Directory</entry>
              <entry align="center">Content</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>designer</entry>
              <entry>The designer is the eclipse plugin that alows for graphical process editing 
              of jPDL process files. Look in the designer/readme.html for more instructions on 
              installing the designer.</entry>
            </row>
            <row>
              <entry>server</entry>
              <entry>The server is actually a JBoss application server which has the jPDL runtime 
              and the jPDL console web application deployed.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="configuringthelogsinthesuiteserver">
      <title>Configuring the logs in the suite server</title>
      <para>If you want to see debug logs in the suite server, update file 
      <literal>jpdl-suite-home/server/server/jbpm/config/log4j.xml</literal>
      Look for
      </para>
      <programlisting>   &lt;!-- ============================== --&gt;
   &lt;!-- Append messages to the console --&gt;
   &lt;!-- ============================== --&gt;

   &lt;appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender"&gt;
      &lt;errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/&gt;
      &lt;param name="Target" value="System.out"/&gt;
      &lt;param name="Threshold" value="INFO"/&gt;</programlisting>
      <para>And in param <literal>Threshold</literal>, change <literal>INFO</literal> to 
      <literal>DEBUG</literal>.
      </para>
      <para>Then you'll get debug logs of all the components.  To limit the number of debug logs, 
      look a bit further down that file until you see 'Limit categories'.  You might want to add 
      tresholds there for specific packages like e.g. </para>
      <programlisting>   &lt;category name="org.hibernate"&gt;
      &lt;priority value="INFO"/&gt;
   &lt;/category&gt;

   &lt;category name="org.jboss"&gt;
      &lt;priority value="INFO"/&gt;
   &lt;/category&gt;</programlisting>
    </section>
    
    <section id="debuggingaprocessinthesuite">
      <title>Debugging a process in the suite</title>
      <para>First of all, in case you're just starting to develop a new process, 
      it is much easier to use plain JUnit tests and run the process in memory like 
      explained in <xref linkend="tutorial" />.
      </para>
      <para>But if you want to run the process in the console and debug it there
      here are the 2 steps that you need to do: 
      </para>
      <para>1) in 
      <literal>jpdl-suite-home/server/server/bin/run.bat</literal>, somewhere at the end, 
      there is a line like this:</para>
      <programlisting>rem set JAVA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y %JAVA_OPTS%</programlisting>
      <para>For backup reasons, just start by making a copy of that line, then remove the first '<literal>rem</literal>'
      and change <literal>suspend=y</literal> to <literal>suspend=n</literal>.  Then you get something like</para>
      <programlisting>rem set JAVA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y %JAVA_OPTS%
set JAVA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n %JAVA_OPTS%</programlisting>
      <para>2) In your IDE debug by connecting to a remote Java application on localhost on 
      port 8787.  Then you can start adding break points and run through the processes with the console
      until the breakpoint is hit.
      </para>
    </section>
  </section>
</chapter>
