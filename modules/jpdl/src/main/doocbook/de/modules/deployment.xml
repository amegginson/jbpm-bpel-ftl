<chapter id="entwicklung">

  <title>Entwicklung</title>
  
  <para>
  jBPM ist eine systemintergrierbare BPM-Maschine, d.h. Sie können jBPM nehmen und dann es in ihr eigenes Java Projekt intergrieren, 
  anstatt ein separates Produkt zu installieren und dann die Intergration mit ihm vorzusetzen. Eine der Schlüsselaspekten, die dieses ermöglicht, 
  ist die Abhängigkeiten zu minimieren. In diesem Kapitel wird über die jBPM-Bibliotheken und ihre Abhängigkeiten diskutiert.
  </para>
  

    <section id="javaruntimeenvironment">
      <title>Java Laufzeitumgebung</title>
      <para>jBPM 3 benötigt J2SE 1.4.2+</para>
    </section>
    
    <section id="jbpmlibraries">
      <title>jBPM Bibliotheken</title>
      <para><emphasis role="bold">jbpm-[version].jar</emphasis> ist die Bibliothek mit der jBPM Kernfunktionalität.</para>
      <para><emphasis role="bold">jbpm-identity-[version].jar</emphasis> 
      ist die (optionale) Bibliothek, die eine Komponente für die Identität enthält, wie beschrieben in
      <xref linkend="theidentitycomponent" />.</para>
    </section>
    
    <section id="thirdpartylibraries">
      <title>Third-Party-Bibliotheken</title>
      <para>
      In einer minimalen Entwicklung, können Sie mit jBPM Prozesse erzeugen und ausführen durch Hinzufügen von commons-logging und dom4j Bibiotheken 
      in Ihrem CLASSPATH. Nehmen Sie sich in Acht, dass die Prozesse in eine Datenbank zu persistieren wird nich unterstützt. Die dom4j Bibiothek
      kann entfernt werden, wenn Sie nicht die Prozess-XML-Syntaxanalyse benutzen, aber errichten Sie ihren Objektgraphen programmatisch
      </para>
  
      
      <table frame="topbot" id="minimal.dependencies.table">
        <tgroup cols="3" rowsep="1" colsep="1">
          <colspec colname="c1" colwidth="1*"/>
          <colspec colname="c2" colwidth="2*"/>
          <thead>
            <row>
              <entry align="center">Bibliothek</entry>
              <entry align="center">Verwendung</entry>
              <entry align="center">Beschreibung</entry>
              <entry align="center">Verzeichnis</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>commons-logging.jar</entry>
              <entry>Logging in jbpm und hibernate</entry>
              <entry>
              Der jBPM Code protokolliert in der Commons Logging. Die Commons Logging Bibliothek 
              kann konfiguriert werden, um die Logs z.B. zu Java 1.4 Logging, Log4j, ... zu senden. 
              Siehe
              <ulink url="http://jakarta.apache.org/commons/logging/guide.html">
              Das Apache Commons-Benutzerhandbuch</ulink> für mehr Information, wie man die Commons Logging
              konfiguriert. Wenn Sie Log4j benutzt werden, die einfachste Weise ist die Log4j Bibliothek und 
              eine log4j.properties Datei in das Classpath einzusetzen. Die Commons-Logging ermittelt dieses 
              automatisch und verwendet diese Konfiguration.
              </entry>
              <entry><literal>lib/jboss (from jboss 4.0.3)</literal></entry>
            </row>
            <row>
              <entry>dom4j-1.6.1.jar</entry>
              <entry>Preozeßdefinition und Hibernate Persistenz</entry>
              <entry>XML Parsing</entry>
              <entry><literal>lib/dom4j</literal></entry>
            </row>
          </tbody>
	  </tgroup>
      </table>
      
          <para>
          
            Eine typische Entwicklung mit jBPM beinhaltet persistente Speicherung von Prozessdefinitionen 
            und von Prozessausführungen. In diesem Fall, braucht jBPM die Hibernate Bibiothek und ihre Abhängigkeiten.
            
          </para>
      
          <para>
            Natürlich, hängen erforderliche Bibiotheken der Hibernate von der Umgebung und welcher Funktionen
            Sie benutzen ab. Für weitere Hinweise, schauen Sie die Hibernate Dokumentation. Die nächste Tabelle zeigt
            die Indikation einer einfachen standalone POJO Entwicklungsumgebung.
          </para>
          
          <para>
            jBPM wird mit hibernate 3.1 final verteilt. Aber jBPM kann auch mit 3.0.x arbeitet.
            In diesem Fall, müssen Sie einige Hibernate-Abfragen (Queries) in der hibernate.queries.hbm.xml 
            Konfigurationsdatei aktualisieren. Für weitere Informationen über Abfragenanpassung 
            siehe <xref linkend="customizingqueries" />
   	 </para>
   	 
      	     <table frame="topbot" id="typical.dependencies.table">
	       <tgroup cols="3" rowsep="1" colsep="1">
	         <colspec colname="c1" colwidth="1*"/>
	         <colspec colname="c2" colwidth="2*"/>
        <thead>
            <row>
              <entry align="center">Bibliothek</entry>
              <entry align="center">Verwendung</entry>
              <entry align="center">Beschreibung</entry>
              <entry align="center">Verzeichnis</entry>
            </row>
          </thead>
          <tbody>
        
            <row>
              <entry>hibernate3.jar</entry>
              <entry>Hibernate Persistenz</entry>
              <entry>Der beste O/R Mapper</entry>
              <entry><literal>lib/hibernate (hibernate 3.1 final)</literal></entry>
            </row>        
          <row>
            <entry>antlr-2.7.5H3.jar</entry>
            <entry>Wird von Hibernate Persistenz für die Abfragenanalyse benutzt.</entry>
            <entry>Parser Bibliothek</entry>
            <entry><literal>lib/jboss (aus jboss 4.0.3)</literal></entry>
          </row>
          <row>
            <entry>cglib-2.1_2jboss.jar</entry>
            <entry>Hibernate Persistenz</entry>
            <entry>Reflexion Bibliothek wird für Hibernate Proxies</entry>
            <entry><literal>lib/jboss (aus jboss 4.0.3)</literal></entry>
          </row>
          <row>
            <entry>commons-collections.jar</entry>
            <entry>Hibernate Persistenz</entry>
            <entry></entry>
            <entry><literal>lib/jboss (aus jboss 4.0.3)</literal></entry>
          </row>
          <row>
            <entry>jaxen-1.1-beta-4.jar</entry>
            <entry>Prozessdefinitionen und Hibernate Persistenz</entry>
            <entry>XPath Bibliothek (wird von dom4j benutzt)</entry>
            <entry><literal>lib/hibernate</literal></entry>
          </row>
          <row>
            <entry>jdbc2_0-stdext.jar</entry>
            <entry>Hibernate Persistenz</entry>
            <entry></entry>
            <entry><literal>lib/hibernate</literal></entry>
          </row>
          <row>
            <entry>asm.jar</entry>
            <entry>Hibernate Persistenz</entry>
            <entry>ASM Byte Code Bibliothek</entry>
            <entry><literal>lib/hibernate</literal></entry>
          </row>
          <row>
            <entry>asm-attrs.jar</entry>
            <entry>Hibernate Persistenz</entry>
            <entry>ASM Byte Code Bibliothek</entry>
            <entry><literal>lib/hibernate</literal></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <para> 
      Die BeanShell Bibliothek ist optional. Wenn Sie diese Bibliothek nicht einsetzen, werden Sie nicht in der Lage
      sein, die BeanShell Integration in der jbpl (jBPM Prozessdefinition Sprache) zu verwenden und dann bekommen Sie eine Log-Nachricht: "jbpm couldn't load the Script class
      and hence, the script element won't be available".
    </para>
          
    <table frame="topbot" id="optional.dependencies.table">
      <tgroup cols="3" rowsep="1" colsep="1">
        <colspec colname="c1" colwidth="1*"/>
        <colspec colname="c2" colwidth="2*"/>
        <thead>
            <row>
              <entry align="center">Bibliothek</entry>
              <entry align="center">Verwendung</entry>
              <entry align="center">Beschreibung</entry>
              <entry align="center">Verzeichnis</entry>
            </row>
          </thead>
        <tbody>
          <row>
            <entry>bsh-1.3.0.jar</entry>
            <entry>BeanShell-Skript Interpreter</entry>
            <entry>
            Wird nur im script-Element und decision-Element benutzt. Wenn Sie diese Prozesselemente
            nicht benuzten, dann können Sie die Bibliothek beanshell löschen, aber dann müssen Sie die Mappingsdatei
            Script.hbm.xml Zeile in der 
            <literal>hibernate.cfg.xml</literal> auskommentieren</entry>
            <entry><literal>lib/jboss</literal></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
  </section>

</chapter>
